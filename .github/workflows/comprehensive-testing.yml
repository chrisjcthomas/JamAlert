name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  MYSQL_VERSION: '8.0'

jobs:
  # Frontend Unit Tests
  frontend-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run frontend unit tests
      run: pnpm run test:coverage
      
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Backend Unit Tests
  backend-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: jamalert_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        cache-dependency-path: backend/pnpm-lock.yaml

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install backend dependencies
      working-directory: ./backend
      run: pnpm install --frozen-lockfile
      
    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: mysql://test_user:test_password@localhost:3306/jamalert_test
      run: |
        npx prisma generate
        npx prisma db push
        
    - name: Run backend unit tests
      working-directory: ./backend
      env:
        DATABASE_URL: mysql://test_user:test_password@localhost:3306/jamalert_test
        JWT_SECRET: test-jwt-secret-key-for-testing-only-32-chars
        SMTP_HOST: smtp.test.com
        SMTP_PORT: 587
        SMTP_USER: test@test.com
        SMTP_PASS: test-password
        WEATHER_API_KEY: test-weather-api-key
      run: pnpm test -- --coverage
      
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: jamalert_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile
        cd backend && pnpm install --frozen-lockfile
        
    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: mysql://test_user:test_password@localhost:3306/jamalert_test
      run: |
        npx prisma generate
        npx prisma db push
        
    - name: Run integration tests
      working-directory: ./backend
      env:
        DATABASE_URL: mysql://test_user:test_password@localhost:3306/jamalert_test
        JWT_SECRET: test-jwt-secret-key-for-testing-only-32-chars
        SMTP_HOST: smtp.test.com
        SMTP_PORT: 587
        SMTP_USER: test@test.com
        SMTP_PASS: test-password
        WEATHER_API_KEY: test-weather-api-key
      run: pnpm test -- --testPathPattern=integration

  # Load Testing
  load-tests:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: jamalert_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        cache-dependency-path: backend/pnpm-lock.yaml

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install backend dependencies
      working-directory: ./backend
      run: pnpm install --frozen-lockfile
      
    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: mysql://test_user:test_password@localhost:3306/jamalert_test
      run: |
        npx prisma generate
        npx prisma db push
        
    - name: Run load tests
      working-directory: ./backend
      env:
        DATABASE_URL: mysql://test_user:test_password@localhost:3306/jamalert_test
        JWT_SECRET: test-jwt-secret-key-for-testing-only-32-chars
        SMTP_HOST: smtp.test.com
        SMTP_PORT: 587
        SMTP_USER: test@test.com
        SMTP_PASS: test-password
        WEATHER_API_KEY: test-weather-api-key
      run: pnpm test -- --testPathPattern=load --testTimeout=300000

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: jamalert_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile
        cd backend && pnpm install --frozen-lockfile
        
    - name: Install Playwright
      run: npx playwright install --with-deps
      
    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: mysql://test_user:test_password@localhost:3306/jamalert_test
      run: |
        npx prisma generate
        npx prisma db push
        
    - name: Build application
      run: pnpm run build
      
    - name: Run E2E tests
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000
        NEXT_PUBLIC_DEMO_MODE: true
      run: npx playwright test
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Security and Performance Audit
  security-audit:
    name: Security and Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile
        cd backend && pnpm install --frozen-lockfile

    - name: Run security audit
      run: |
        pnpm audit --audit-level=moderate
        cd backend && pnpm audit --audit-level=moderate
        
    - name: Run dependency check
      run: |
        npx audit-ci --moderate
        cd backend && npx audit-ci --moderate

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create test summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports have been uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Some tests failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
